%META:TOPICINFO{author="ProjectContributor" date="1716288892" format="1.1" version="1"}%
%META:TOPICPARENT{name="UserDocumentationCategory"}%
%STARTINCLUDE%
---+!! Data Forms

How to set up and work with data forms, an extremely powerful concept that allow you to store structured data in an intuitive and simple-to-use way.

%TOC%

---++ Overview
As well as freeform text, each Foswiki topic can store additional data in _name/value pairs_ called _fields_. The set of fields that can be associated with a topic is defined by the _form_ that is selected for that topic.

Fields and forms are collectively known as _data forms_.

Data forms are not normally visible when you view a topic (except for a small table at the bottom of the topic - depending on the skin being used).

The [[https://foswiki.org/Support/SupportQuestions][Foswiki Support questions]] serves as a demonstration how data forms can be used:
   * To create a complete list of "Support Questions" topics
   * To show a subset of all questions that have not been answered yet
   * To display the title and subject of each question

Other uses for data forms could be:
   * Create a list of all contributions of one particular author
   * Create a quick report of all employee names and phone numbers
   * Create a software documentation repository
   * Create and track tasks
   * Create a bug tracker

<div class="foswikiHelp">
Sometimes new users with a web programming background are confused how "data forms" and "HTML forms" relate. They simple answer is that they are not related. But you'll see later on that you can use web forms to pass data to a data form.
</div>

To work with data forms, you need 3 things:
   1. The form. This is specified in a table in a topic, and defines the names and types of the fields in the form - see [[#DataDefinition][The form topic]].
   1. The web's !WebPreferences needs to list the form in the =WEBFORMS= setting - see [[#EnablingForms][Enabling forms]].
   1. The form must be connected to the topic - see [[#AddingAForm][Adding a form to a topic]].
Then you are ready to edit the topic and enter data values for each field.

<div class="foswikiHelp">
Optional further steps are:
   1. [[#TemplateTopic][Create a template topic]] so that new topics based on that template have the form already added.
   1. [[#WebForms][Build an HTML form]] to create new topics based on that template topic, or to pass field values from the HTML form to the data form.
   1. [[#UsingFormData][Build a search]] to create a report from the stored data
   1. [[%SYSTEMWEB%.VarQUERY][%<nop>QUERY%]] form fields to get their data into the text.
   1. [[#AutoSkinning][Create a custom view template]]
Most of these additional steps are described below.
</div>

For a step by step tutorial, see the FAQ [[%SYSTEMWEB%.FAQAnApplicationWithWikiForm][How can I create a simple data form based application?]].

#DefiningForm
#DataDefinition
---++ The form topic
The definition of the fields in a form (also known as the _schema_ for the form) is done using a table in an ordinary topic. The name of the form topic usually ends with "Form". For example, "<nop>QuestionForm". The form topic can be placed in any web, but usually it is kept in the same web as the topics that will be using it.

The table looks like this:
<verbatim class="tml">
| *Title*  | *Type* | *Size* | *Values* | *Description* | *Attributes* | *Default* |
| Question | text | 100 | | The question being asked | H | |
| Status | select | 1 | Asked,More info required,Answered | Mandatory status | M | Asked |
| Related Questions | textboxlist | | | | | |
</verbatim>

Form definition topics can be protected in the usual manner, using AccessControl, to limit who can change the form definition and/or individual value lists. Note that access to view the form is required to be able to _edit_ a topic that _uses_ the form, though access to view the form is _not_ required to _view_ a topic where the form has been used.

#FormTable
Each row of the form table specifies one form field. A row contains
up to 7 columns.
   1 *[[#Title][Title]]* - The title of the form field. Required.
   1 *[[#DescType][Type]]* - The data type: text, date, single or multi-value, labels. Required.
   1 *[[#DescType][Size]]* - The input size of the form field inputs on the edit screen. Required.
   1 *[[#DescValues][Values]]* - for checkboxes, radio buttons and dropdown lists: predefined input to select from. Optional.
   1 *Description* - a message that describes the field, sometimes used in help information. Optional.
   1 *[[#DescAttributes][Attributes]]* - attributes controlling how the field is handled. Optional.
   1 *[[#DescType][Default]]* - the default for new fields. Optional.

<div class="foswikiHelp">
Form definition tables often have an optional header row as a useful reminder of the column names:
<verbatim class="tml">
| *Title*  | *Type* | *Size* | *Values* | *Description* | *Attributes* | *Default* |
</verbatim>
You will sometimes see *Name* used instead of *Title* in older form definitions.
</div>

#FormFieldAttributes
---+++ Title
The human-readable title of the form field.

In order to be able to map human-readable field titles to topics, each field title is automatically processed to extract a field _name_. For example the title "Camel Case!" will be processed to create the name "CamelCase". The processing is very simple - any characters not valid in a topic name are removed. Names have to be unique for each form definition.

   * The field name used for a =select=, =checkbox= or =radio= field will be interpreted as a _topic name_, and Foswiki may try to fetch values from that topic.
   * You can use =[<nop>[...]]= double bracket links to link to a topic/field that is not a wiki word.
   * You can also use square bracket links like =[<nop>[fieldname][field title]]= to explicitly specify a topic to fetch values from
      : e.g =[<nop>[ComputerManufacturers][Made by]]=
      : In this example, the topic =ComputerManufacturers= is used to fetch values for the =Madeby= field.
   * A very few field names are reserved. If you try to use one of these names, Foswiki will automatically append an underscore to the name when the form is used. But do *not* use the field name ==undefined== (or any variant of that name, such as !UnDefined), as that name is reserved for use in search queries.
   * Releases prior to Foswiki 2.0 stripped all characters other than A-Z, a-z, 0-9 and _ when generating field names. So a field titled =F&uuml;hler= would be given the name =Fhler=. The same field name on Foswiki 2.0 is =F&uuml;hler=. (See [[System.UpgradeGuide#DataForms_Applications]] for more information.}

#DescType
---+++ Type, Size, Values and Default
The *Type* column defines the how the data is processed, and how you are prompted for input: text, date, single or multi-value, or labels (read-only).

The appearance of the input controls can also be somewhat controlled by the *Size* and *Values* columns:

%TABLE{columnwidths="12%, 22%, 22%, 22%, 22%" sort="off"}%
| *Type* | *Description* | *Size* | *Values* |
| =checkbox= \
| One or more checkboxes. \
| How many checkboxes will be displayed on each line. \
| A comma-separated list of item labels. |
| =checkbox+buttons= | As =checkbox= but with *Set* and *Clear* buttons | | |
| =checkbox+values= | As =checkbox=, but allowing the definition of values that are different to the displayed text. | | |
| =date= \
| A single-line text box and a calendar icon button next to it; clicking on the button will bring up a calendar from which the user can select a date. \
The date can also be typed into the text box. \
| The text box width in characters. \
| The initial text (unless =default= column exists). Some browsers may strip linefeeds from =text= fields when a topic is saved. If you need linefeeds in a field, make sure it is a =textarea=. |
| =label= \
| Read-only label text. \
| \
| The text of the label. \
|
| =radio= \
| As =checkbox= except that radio buttons are mutually exclusive; only one can be selected. \
| | |
| =radio+values= | As =radio=, but allowing the definition of values that are different to the displayed text. |
| =select= \
| A single-select box / dropdown. \
| A fixed size for the box (e.g. =1=, or a range e.g. =3..10=. \
To get a dropdown, use size =1=. %BR% \
If you specify a range, the box will never be smaller than 3 items, never larger than 10, and will be 5 high if there are only 5 options. \
| A comma-separated list of options for the box. |
| =select+multi= | like =select= but with the ability to select multiple items || |
| =select+values= | like =select= but allowing the definition of values that are different to the displayed text. You can combine these modifiers e.g. =select+multi+values= | | |
| =text= \
| A one-line text field. \
| The text box width in number of characters. \
| The initial (default) content when a new topic is created with this form definition (unless =default= column exists). \
|
| =textarea= \
| A multi-line text box. \
| Size in columns x rows, e.g. =80x6=; default size is 40x5. \
| The initial text (unless =default= column exists). \
|
  
<div class='foswikiHelp'>
---++++ Example of select+values
A field like:
<verbatim class="tml">
| Field 9 | select+values | 1 | One, Two=2, Three=III, Four | Various values formats |
</verbatim> 

displays as: 
<select name="Field9" size="1" class="foswikiSelect">
<option value="One" class="foswikiOption">One</option>
<option value="2" class="foswikiOption">Two</option>
<option value="III" class="foswikiOption">Three</option>
<option value="Four" class="foswikiOption">Four</option>
</select> 

The generated HTML code reveals that the form values differ from the option labels:
<verbatim class="tml">
<select name="Field9" size="1" class="foswikiSelect">
<option value="One" class="foswikiOption">One</option>
<option value="2" class="foswikiOption">Two</option>
<option value="III" class="foswikiOption">Three</option>
<option value="Four" class="foswikiOption">Four</option>
</select>
</verbatim>
</div>

When a topic using the form is first created, initial values for fields are determined from:
   1 topic templates, or
   1 query parameters, or
   1 the *Default* column, or
   1 the *Values* column. The first item in the list for a select or radio type is taken as the default. For =label=, =text=, and =textarea= fields the value may also contain commas. =checkbox= fields cannot be initialized through the form definition.
Leading and trailing spaces in the *Values* column are ignored.

#DescValues
If the *Values* column is empty, Foswiki will try to retrieve values from
a topic with the same _name_ as the field. For example:
<verbatim class="tml">
| *Title*  | *Type* | *Size* |
| Dirigible Manufacturers | select | |
</verbatim>
Foswiki will look for the topic !DirigibleManufacturers to get the possible values for the =select= field. 

The !DirigibleManufacturers topic must contain a table, where each row of the table describes a possible value. The table only requires one column, =Name=. Other columns may be present, but are ignored.

For example:
<verbatim class="tml">
| *Name* |
| Routan |
| Focke-Wulf |
| De Havilland |
</verbatim>
</div>

In more advanced applications, the *Values* can be dynamically generated. [[Macros]] in the *Values* column get expanded when the form definition is loaded.
   * If you want to use a =|= character in the initial values field, you have to precede it with a backslash, thus: =\|=.
      * =\|= escaping is __only active in the Values column._  It is not usable elsewhere.  Use =&amp;vbar;= or =&amp;#124;= in other columns.
   * You can use =&lt;nop>= to prevent macros from being expanded.
   * The [[%SYSTEMWEB%.FormatTokens][Format tokens]] can be used to prevent expansion of other characters.
   * There's [[#SearchExample][an example]] of this below.
#SearchExample
<div class='foswikiHelp'>
---++++ Example: How to set field values using a SEARCH
A powerful way to populate selectable field values is by using [[%SYSTEMWEB%.VarSEARCH][SEARCH]] to generate a comma-separated list of values.

For example, to create a list of documentation topics whose name contain "Wiki", you write:
<verbatim class="tml">
| *Title*  | *Type* | *Size* | *Values* |
| Subject | select+multi | 10 | ,%SEARCH{ \
   "Wiki" \
   scope="topic" \
   web="%SYSTEMWEB%" \
   nonoise="on" \
   type="regex" \
   format="$topic" \
   separator=", " \
}% |
</verbatim>
Note the use of the backslash to be able to write the macro in a more readable way using multiple lines. The comma just before the =SEARCH= means "empty value" to make it possible to select none.

Sometimes you have a topic with a bullet list that can be used as selectable values. The rather advanced =SEARCH= expression would be:
<verbatim class="tml">
| Subject | select+multi | 10 | ,%SEARCH{ \
	"   *\s*.*?" \
	topic="QuestionSubjectCategory" \
	type="regex" \
	multiple="on" \
	casesensitive="on" \
	nonoise="on" \
	separator="," \
	format="$pattern(.*   \*\s*([^\n]*).*)" \
}% | | |
</verbatim>
You are not expected to write these kind of search expressions yourself, but if you like you can find more of these in [[%SYSTEMWEB%.SearchPatternCookbook][Search Pattern Cookbook]].
</div>
<div class='foswikiHelp'>
---++++ Extending the range of form data types
Some plugins add data types. For instance, [[%SYSTEMWEB%.JQueryPlugin][JQueryPlugin's]] sub-plugin [[%SYSTEMWEB%.JQueryPlugin][JQueryFarbtastic]] adds the data type =color=:
<verbatim class='tml'>
| *Title*  | *Type* | *Size* |
| MyColor | color | 10 |
</verbatim>

Example (click in the field to view):
%JQREQUIRE{"farbtastic"}%
<input type="text" id="color" name="color" value="#123456" class="jqFarbtastic" />
---
*Note to extension developers* %BR%
Such extended data types are single-valued (can only have one value) with the following exceptions:
   * any type name starting with =checkbox=
   * any type name with =+multi= anywhere in the name
Types with names like this can both take multiple values.
</div>

#DescAttributes
---+++ Attributes
Extra attributes that control some aspects of how the field is handled.

%TABLE{columnwidths="20%,80%" sort="off"}%
| =H= | Indicates that this field should not be shown in view mode. However, the field is available for editing and storing information. |
| =M= | Indicates that this field is mandatory. The topic cannot be saved unless a value is provided for this field. |

Multiple attributes can be entered, separated by spaces:
<verbatim>
| TopicTitle | text | 100 | | | H M |
</verbatim>

#EnablingForms
---++ Enabling forms in a web
Before using a form in a topic, the form must be enabled in the containing web's !WebPreferences topic.

This is done by adding the form name to the =WEBFORMS= setting. The setting accepts a comma-separated list of form topics:
<verbatim class="tml">
   * Set WEBFORMS = BugForm, FeatureForm, Books.BookLoanForm, %USERSWEB%.UserForm
</verbatim>
As you can see, form topics located in other webs can be added by using their web prefix.

You have to list the available form topics explicitly. You cannot use a =SEARCH= to define =WEBFORMS=.

#AddingAForm
---++ Adding a form to a topic
With =WEBFORMS= set correctly, a form can be added or changed when you edit a topic.

---+++ Automatically adding a form to a new topic
#TemplateTopic
---++++ Using a template topic
If you don't want users to select a form themselves, this step can be automated by using a [[%SYSTEMWEB%.TemplateTopics][template topic]] that has the form connected.

For example, Question topics on foswiki.org are created using !QuestionTemplate:
<pre>
%<nop>META:FORM{name="QuestionForm"}%
%<nop>META:FIELD{name="<nop>TopicTitle" attributes="H" title="<nop>TopicTitle" value=""}%
%<nop>META:FIELD{name="Subject" attributes="" title="Subject" value=""}%
%<nop>META:FIELD{name="Status" attributes="M" title="Status" value="Asked"}%
</pre>
In the template initial field values can be set, like the "Status" field in this example.

---++++ Using the edit template
If you will use only one form in a web, you can also modify the web's =WebTopicEditTemplate= topic to contain the form reference.

---++++ Using url parameters
You can also pass the =formtemplate= parameter to the edit (not save) URL.
Initial values can then be provided in the URLs or as form values.

For example:
<verbatim>
%SCRIPTURL{"edit" topic="%WEB%.KnowledgeTopicAUTOINC00001" formtemplate="MyForm" Subject="FAQWhatIsWikiWiki" Category="One" Category="Two" action="form"}%
</verbatim>

   * =XxxYyyAUTOINC00001=: creates a new auto-numbered topic name with base "XxxYyy" - see [[%SYSTEMWEB%.TemplateTopics#AutomaticallyGeneratedTopicname][automatically generate unique topic names]]
   * =formtemplate=: specifies the form topic, like: =formtemplate=MyForm=
   * form values: =name=value=, like: =Subject=FAQWhatIsWikiWiki=
   * form values with multiple values like checkboxes: =name=value1;name=value2=, like: =Category=One;Category=Two=
   * =action=form=: shows the topic data form and hides the topic text form

#WebForms
---+++ Using a web form to create a topic and pass data
If you want to create+save a topic instead of bringing up the edit screen, you must use a web form.

The same parameters as above can be set in HTML (hidden) form fields:
<verbatim class='tml'>
<form name='newtopic' action='%SCRIPTURLPATH{"save" web="%SANDBOXWEB%"}%' method='post'>
<input type='hidden' name='formtemplate' value='SimpleForm' />
<input type='hidden' name='topic' value='KnowledgeTopicAUTOINC00001' />
<input type='hidden' name='Subject' value='FAQWhatIsWikiWiki' />
<input type='hidden' name='Category' value='One' />
<input type='hidden' name='Category' value='Two' />
<input type='submit' class='foswikiSubmit' value='Create topic' />
</form>
</verbatim>

%IF{"istopic '%SANDBOXWEB%.SimpleForm'" then="
    <form name='newtopic' action='%SCRIPTURLPATH{"save" web="%SANDBOXWEB%"}%' method='post'>
    <input type='hidden' name='formtemplate' value='SimpleForm' />
    <input type='hidden' name='topic' value='KnowledgeTopicAUTOINC00001' />
    <input type='hidden' name='Subject' value='FAQWhatIsWikiWiki' />
    <input type='hidden' name='Category' value='One' />
    <input type='hidden' name='Category' value='Two' />
    <input type='submit' class='foswikiSubmit' value='Create topic' />
    </form>
" else="This demo is not functional because %SANDBOXWEB%.SimpleForm does not exist.  Create a simple data form
with the fields Subject and Category. Return here, and a Create button will be shown."}%

For an overview of web form parameters, see [[%SYSTEMWEB%.CommandAndCGIScripts][CGI and Command Line Scripts]].
   
---++ Changing a form
You can change a form definition, and Foswiki will try to make sure you don't lose any data from the topics that use that form. 

   * If you change the form definition, the changes will not take affect in a topic that uses that form until you edit and save it.
   * If you add a new field to the form, then it will appear next time you edit a topic that uses the form.
   * If you delete a field from the form, or change a field title (and therefore the field name), then the original data for that field will not be visible when you edit the topic. *If you save the topic, the original data will be lost* (though thanks to revision control, you can always see it in older versions of the topic)
   * If two people edit the same topic containing a form at exactly the same time, and both change fields in the form, Foswiki will try to merge the changes so that no data is lost.
 
#UsingFormData
---++ Searching in form data
The best way to search in form data is using the structured query language in the SEARCH macro.

As an example, the search used on [[https://foswiki.org/Support/SupportQuestions][Foswiki Support questions]] is:
<verbatim>
%SEARCH{
	"QuestionForm.Status='Asked'"
	type="query"
	excludetopic="QuestionTemplate"
	web="%WEB%"
	format="   * [[$web.$topic][$formfield(TopicTitle)]] $formfield(Subject)"
	order="formfield(Extension)"
	nonoise="on"
}%
</verbatim>
For a step by step tutorial, see the FAQ [[%SYSTEMWEB%.FAQAnApplicationWithWikiForm][How can I create a simple data form based application?]].

See [[%SYSTEMWEB%.VarSEARCH][SEARCH]] for an overview of =SEARCH= parameters, and [[%SYSTEMWEB%.QuerySearch][Query Search]] for the query language specifics.

#AutoSkinning
---++ Automatic selection of [[SkinTemplates][skin templates]] based on form

A useful feature is the automatic selection of view and edit templates based on the name of the form attached to a topic. With this we are really starting build up a topic as something resembling a typed object: the form name being the type identifier, and its form+templates being the details of its implementation. See [[https://foswiki.org/Extensions/AutoViewTemplatePlugin][AutoViewTemplatePlugin]] for details of this feature.

%STOPINCLUDE%

---
*Related Topics:* %SYSTEMWEB%.DeveloperDocumentationCategory, %SYSTEMWEB%.TemplateTopics, %SYSTEMWEB%.FAQAnApplicationWithWikiForm, %SYSTEMWEB%.VarFORMFIELD, %SYSTEMWEB%.SkinTemplates
